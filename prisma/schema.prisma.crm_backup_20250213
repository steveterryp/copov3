generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////
// Enums
/////////////////////////////////

// Status Enums
enum POVStatus {
  PROJECTED
  IN_PROGRESS
  STALLED
  VALIDATION
  WON
  LOST
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SupportRequestStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum FeatureRequestStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
}

enum MilestoneStatus {
  PENDING
  COMPLETED
  OVERDUE
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
}

enum WorkflowStepStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  SKIPPED
}

// Priority Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum SupportRequestPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FeatureRequestImpact {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Role Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  PROJECT_MANAGER
  SALES_ENGINEER
  TECHNICAL_TEAM
  MEMBER
  ADMIN
  OWNER
}

// Other Enums
enum PhaseType {
  PLANNING
  EXECUTION
  REVIEW
}

enum KPIType {
  PERCENTAGE
  NUMERIC
  BOOLEAN
  CUSTOM
}

enum WorkflowType {
  POV_APPROVAL
  PHASE_APPROVAL
  TASK_APPROVAL
  CUSTOM
}

/////////////////////////////////
// Models (Ordered by Dependencies)
/////////////////////////////////


/////////////////////////////////
// POV Domain
/////////////////////////////////

model PhaseTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean   @default(false)
  workflow    Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  phases Phase[]
}

model Phase {
  id          String    @id @default(cuid())
  name        String
  description String
  type        PhaseType @default(PLANNING)
  startDate   DateTime
  endDate     DateTime
  order       Int
  povId       String
  templateId  String?
  details     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  pov      POV           @relation(fields: [povId], references: [id], onDelete: Cascade)
  template PhaseTemplate? @relation(fields: [templateId], references: [id])
  tasks    Task[]

  @@index([povId])
  @@index([templateId])
  @@index([startDate, endDate])
}


/////////////////////////////////
// TASK Domain
/////////////////////////////////

model Comment {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id         String   @id @default(cuid())
  taskId     String   @map("task_id")
  filename   String
  fileSize   Int      @map("file_size")
  fileType   String   @map("file_type")
  storageUrl String   @map("storage_url")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
}


/////////////////////////////////
// ACTIVITY Domain
/////////////////////////////////

model TaskActivity {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  action    String
  timestamp DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_activities")
}


/////////////////////////////////
// TASK Domain
/////////////////////////////////

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  assigneeId  String?      @map("assignee_id")
  teamId      String?      @map("team_id")
  povId       String?      @map("pov_id")
  phaseId     String?      @map("phase_id")
  dueDate     DateTime?    @map("due_date")
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(OPEN)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  assignee    User?          @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  team        Team?          @relation(fields: [teamId], references: [id], onDelete: SetNull)
  pov         POV?           @relation(fields: [povId], references: [id], onDelete: SetNull)
  phase       Phase?         @relation(fields: [phaseId], references: [id], onDelete: SetNull)
  comments    Comment[]
  attachments Attachment[]
  activities  TaskActivity[]

  @@map("tasks")
}


/////////////////////////////////
// TEAM Domain
/////////////////////////////////

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members TeamMember[]
  povs    POV[]
  tasks   Task[]
}


/////////////////////////////////
// POV Domain
/////////////////////////////////

model KPITemplate {
  id             String    @id @default(cuid())
  name           String
  description    String?
  type           KPIType
  isCustom       Boolean   @default(false)
  defaultTarget  Json?
  calculation    String?
  visualization  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  kpis POVKPI[]
}

model POVKPI {
  id          String    @id @default(cuid())
  povId       String
  templateId  String?
  name        String
  target      Json
  current     Json
  history     Json      @default("[]")
  weight      Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  pov      POV          @relation(fields: [povId], references: [id], onDelete: Cascade)
  template KPITemplate? @relation(fields: [templateId], references: [id])

  @@index([povId])
  @@index([templateId])
}

model CRMSyncHistory {
  id        String   @id @default(cuid())
  povId     String
  status    String
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  pov POV @relation(fields: [povId], references: [id], onDelete: Cascade)

  @@index([povId])
  @@index([createdAt])
}

model POVLaunch {
  id          String    @id @default(cuid())
  povId       String    @unique
  confirmed   Boolean   @default(false)
  checklist   Json
  launchedAt  DateTime?
  launchedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  pov POV @relation(fields: [povId], references: [id], onDelete: Cascade)
}

model Milestone {
  id          String          @id @default(cuid())
  name        String
  description String?
  dueDate     DateTime
  povId       String
  status      MilestoneStatus @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  pov POV @relation(fields: [povId], references: [id], onDelete: Cascade)

  @@index([povId])
  @@index([dueDate])
}

model POV {
  id          String    @id @default(cuid())
  title       String
  description String
  status      POVStatus @default(PROJECTED)
  priority    Priority  @default(MEDIUM)
  startDate   DateTime
  endDate     DateTime
  objective   String?

  // CRM Integration Fields
  dealId           String?
  opportunityName  String?
  revenue          Decimal?
  forecastDate     DateTime?
  customerName     String?
  customerContact  String?
  partnerName     String?
  partnerContact  String?
  competitors     String[]
  solution        String?
  lastCrmSync     DateTime?
  crmSyncStatus   String?

  // Enhanced Metadata
  documents       Json?
  featureRequests Json?
  supportTickets  Json?
  blockers        Json?
  tags            String[]

  // Budget and Resources
  estimatedBudget Decimal?
  budgetDocument  String?
  resources       Json?

  // Relations
  ownerId     String
  teamId      String?
  owner       User          @relation("POVOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  team        Team?         @relation(fields: [teamId], references: [id])
  phases      Phase[]
  tasks       Task[]
  kpis        POVKPI[]
  syncHistory CRMSyncHistory[]
  launch      POVLaunch?
  milestones  Milestone[]
  workflows   Workflow[]
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status, priority])
  @@index([ownerId])
  @@index([teamId])
  @@index([lastCrmSync])
}


/////////////////////////////////
// TEAM Domain
/////////////////////////////////

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}


/////////////////////////////////
// ACTIVITY Domain
/////////////////////////////////

model Activity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  type      String
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      String   @default("info")
  actionUrl String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}


/////////////////////////////////
// AUTH Domain
/////////////////////////////////

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


/////////////////////////////////
// SUPPORT Domain
/////////////////////////////////

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportRequest {
  id          String                 @id @default(cuid())
  userId      String
  type        String
  priority    SupportRequestPriority @default(MEDIUM)
  subject     String
  description String
  status      SupportRequestStatus   @default(OPEN)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeatureRequest {
  id           String               @id @default(cuid())
  userId       String
  category     String
  impact       FeatureRequestImpact @default(MEDIUM)
  title        String
  description  String
  businessCase String
  isUrgent     Boolean              @default(false)
  status       FeatureRequestStatus @default(PENDING)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


/////////////////////////////////
// AUTH Domain
/////////////////////////////////

model User {
  id               String     @id @default(cuid())
  name             String
  email            String     @unique
  password         String
  role             UserRole   @default(USER)
  status           UserStatus @default(ACTIVE)
  lastLogin        DateTime?
  resetTokenHash   String?
  resetTokenExpiry DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relations
  customRole      Role?            @relation(fields: [customRoleId], references: [id])
  customRoleId    String?
  ownedPOVs       POV[]            @relation("POVOwner")
  teamMembers     TeamMember[]
  activities      Activity[]
  notifications   Notification[]
  assignedTasks   Task[]           @relation("TaskAssignee")
  comments        Comment[]
  taskActivities  TaskActivity[]
  refreshTokens   RefreshToken[]
  settings        UserSettings?
  supportRequests SupportRequest[]
  featureRequests FeatureRequest[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}


/////////////////////////////////
// POV Domain
/////////////////////////////////

model CRMFieldMapping {
  id          String    @id @default(cuid())
  crmField    String    @unique
  localField  String
  transformer String?
  isRequired  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkflowStep {
  id         String            @id @default(cuid())
  name       String
  order      Int
  status     WorkflowStepStatus @default(PENDING)
  role       String
  workflowId String
  workflow   Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  metadata   Json?
  comment    String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([workflowId])
}

model Workflow {
  id        String         @id @default(cuid())
  type      WorkflowType
  status    WorkflowStatus @default(PENDING)
  povId     String
  pov       POV            @relation(fields: [povId], references: [id], onDelete: Cascade)
  steps     WorkflowStep[]
  metadata  Json?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([povId])
}

/////////////////////////////////
// SETTINGS Domain
/////////////////////////////////

model SystemSettings {
  id            String   @id
  notifications Boolean  @default(true)
  twoFactor     Boolean  @default(false)
  darkMode      Boolean  @default(false)
  updatedAt     DateTime @updatedAt
}

model CRMSettings {
  id            String   @id @default(cuid())
  apiUrl        String
  apiKey        String
  clientId      String
  clientSecret  String
  autoSync      Boolean  @default(true)
  syncInterval  Int      @default(30)
  retryAttempts Int      @default(3)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
